from aiogram import types
from aiogram.dispatcher.router import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

from app.keyboards.priorities import create_priorities_kb
from app.keyboards.photo_options import photo_options_kb

# Define states
class UserInteractionStates(StatesGroup):
    waiting_for_door_type = State()
    waiting_for_priorities = State()
    waiting_for_photo_decision = State()
    waiting_for_contact = State()
    waiting_for_photo = State()

# Declare a new router
router = Router()

@router.message(lambda message: message.text in ["–í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å", "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è –¥–≤–µ—Ä—å"])
async def door_selection(message: types.Message, state: FSMContext):
    # Save the door type in the user's state
    await state.update_data(door_type=message.text)
    
    # Transition to the next state
    await state.set_state(UserInteractionStates.waiting_for_priorities)
    await state.update_data(priorities=[])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3):",
        reply_markup=create_priorities_kb([])
    )

@router.callback_query(lambda c: c.data.startswith('priority:'))
async def handle_priority_selection(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    selected_priority = callback_query.data.split(':')[1]
    priorities = user_data.get('priorities', [])

    if selected_priority in priorities:
        priorities.remove(selected_priority)
    elif len(priorities) < 3:
        priorities.append(selected_priority)
    else:
        await callback_query.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.", show_alert=True)
        return

    # Save the updated priorities in the user's state
    await state.update_data(priorities=priorities)

    # Only update the message if there is a change
    await callback_query.message.edit_reply_markup(
        reply_markup=create_priorities_kb(priorities)
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'continue')
async def handle_continue(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    priorities = user_data.get('priorities', [])
    if len(priorities) == 0:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.", show_alert=True)
    else:
        # Transition to the next state
        await state.set_state(UserInteractionStates.waiting_for_photo_decision)
        await callback_query.message.answer(
            "–•–æ—á–µ—à—å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –∏ –ø—Ä–µ–¥–ª–æ–∂—É, —á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç –ø–æ–¥ –Ω–µ–≥–æ? "
            "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –¥–≤–µ—Ä–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –ø–æ–¥—Å–∫–∞–∂—É, –≤ –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –¥–≤–∏–≥–∞—Ç—å—Å—è.",
            reply_markup=photo_options_kb
        )

@router.message(StateFilter(UserInteractionStates.waiting_for_photo_decision))
async def handle_photo_decision(message: types.Message, state: FSMContext):
    if message.text == "üì∏ –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ / –¥–≤–µ—Ä–∏":
        await message.answer("–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –∂–¥—É —Ñ–æ—Ç–æ.")
        # Transition to a state where the user can send a photo
        await state.set_state(UserInteractionStates.waiting_for_photo)
    elif message.text == "üôà –ü–æ–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        # Transition to a state where the user can provide contact information
        await state.set_state(UserInteractionStates.waiting_for_contact)